{"version":3,"sources":["webpack:///./src/templates/tag.js"],"names":["pageQuery","Tag","pageContext","data","posts","allMarkdownRemark","edges","labels","site","siteMetadata","tag","totalCount","tagHeader","title","keywords","className","map","post","tags","node","frontmatter","key","id","to","fields","slug","date","excerpt","techTags","forEach","i","label","push","tech","name","size","color","getTechTags"],"mappings":"4FAAA,kJAuGaA,EAAS,aAwCPC,UArIH,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACpBC,EAAQD,EAAKE,kBAAkBC,MAC/BC,EAASJ,EAAKK,KAAKC,aAAaF,OAC9BG,EAAQR,EAARQ,IACAC,EAAeR,EAAKE,kBAApBM,WACFC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEID,EAFJ,IAyBf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEG,MAAM,OACNC,SAAU,CAAC,SAAD,8DASZ,yBAAKC,UAAU,cACb,yBAAKA,UAAU,WACb,kBAAC,IAAD,OAGF,yBAAKA,UAAU,kBACb,2BACE,wBAAIA,UAAU,SAASH,IAExBR,EAAMY,KAAI,SAAAC,GACT,IAAMC,EAAOD,EAAKE,KAAKC,YAAYF,KACnC,OACE,yBAAKG,IAAKJ,EAAKE,KAAKG,GAAIP,UAAU,kBAChC,kBAAC,OAAD,CAAMQ,GAAIN,EAAKE,KAAKK,OAAOC,KAAMV,UAAU,aACzC,wBAAIA,UAAU,SAASE,EAAKE,KAAKC,YAAYP,QAE/C,2BAAOE,UAAU,qBAAjB,iBACiBE,EAAKE,KAAKC,YAAYM,MAEvC,uBAAGX,UAAU,iBAAiBE,EAAKE,KAAKQ,SACxC,yBAAKZ,UAAU,WAtDT,SAAAG,GAClB,IAAMU,EAAW,GAiBjB,OAhBAV,EAAKW,SAAQ,SAACnB,EAAKoB,GACjBvB,EAAOsB,SAAQ,SAAAE,GACTrB,IAAQqB,EAAMrB,KAChBkB,EAASI,KACP,kBAAC,IAAD,CACEX,IAAKS,EACLpB,IAAKqB,EAAMrB,IACXuB,KAAMF,EAAME,KACZC,KAAMH,EAAMG,KACZC,KAAMJ,EAAMI,KACZC,MAAOL,EAAMK,eAMhBR,EAoC+BS,CAAYnB","file":"component---src-templates-tag-js-bb7f6bbfa5e8d0b66062.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link, graphql } from \"gatsby\";\nimport \"../stylesheets/application.scss\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Sidebar from \"../components/sidebar/Sidebar\";\nimport TechTag from \"../components/tags/TechTag\";\n\nconst Tag = ({ pageContext, data }) => {\n  const posts = data.allMarkdownRemark.edges;\n  const labels = data.site.siteMetadata.labels;\n  const { tag } = pageContext;\n  const { totalCount } = data.allMarkdownRemark;\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n    } tagged with \"${tag}\"`;\n\n  const getTechTags = tags => {\n    const techTags = [];\n    tags.forEach((tag, i) => {\n      labels.forEach(label => {\n        if (tag === label.tag) {\n          techTags.push(\n            <TechTag\n              key={i}\n              tag={label.tag}\n              tech={label.tech}\n              name={label.name}\n              size={label.size}\n              color={label.color}\n            />\n          );\n        }\n      });\n    });\n    return techTags;\n  };\n\n  return (\n    <Layout>\n      <SEO\n        title=\"Home\"\n        keywords={[\n          `gatsby`,\n          `javascript`,\n          `react`,\n          `web development`,\n          `node.js`,\n          `graphql`\n        ]}\n      />\n      <div className=\"index-main\">\n        <div className=\"sidebar\">\n          <Sidebar />\n        </div>\n\n        <div className=\"post-list-main\">\n          <i>\n            <h2 className=\"title\">{tagHeader}</h2>\n          </i>\n          {posts.map(post => {\n            const tags = post.node.frontmatter.tags;\n            return (\n              <div key={post.node.id} className=\"container mt-5\">\n                <Link to={post.node.fields.slug} className=\"text-dark\">\n                  <h2 className=\"title\">{post.node.frontmatter.title}</h2>\n                </Link>\n                <small className=\"d-block text-info\">\n                  Được đăng vào {post.node.frontmatter.date}\n                </small>\n                <p className=\"mt-3 d-inline\">{post.node.excerpt}</p>\n                <div className=\"d-block\">{getTechTags(tags)}</div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nTag.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired\n            })\n          })\n        }).isRequired\n      )\n    })\n  })\n};\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        author\n        labels {\n          tag\n          tech\n          name\n          size\n          color\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 200)\n          html\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD-MM-YYYY\")\n            tags\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Tag;\n"],"sourceRoot":""}